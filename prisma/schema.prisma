// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  email String @unique
  password String
  created_at DateTime @default(now())
  folders Folder[]
  files File[]
}

model Folder {
  id Int @id @default(autoincrement())
  name String
  created_at DateTime @default(now())
  visited_at DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  parentFolderId Int?
  parentFolder Folder? @relation("FolderToSubfolders", fields: [parentFolderId], references: [id], onDelete: Cascade)
  subfolders Folder[] @relation("FolderToSubfolders")

  files File[]
}

model File {
  id Int @id @default(autoincrement())
  name String
  path String
  size Int
  type String
  format String @default("")
  created_at DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  folder Folder? @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId Int?
}

model Session {
  id         String   @id @default(cuid())
  sid        String   @unique
  data       String
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt   @map("updated_at")
}